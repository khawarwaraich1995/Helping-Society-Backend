<?php

namespace App\Http\Controllers\Api\Client;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Customer;
use Illuminate\Support\Facades\Hash;
use Auth;
use Validator;

/**
 * @group Client Authentication
 *
 * API endpoints for managing clients authentication
 */

class AuthController extends Controller
{

    /**
     * Register Endpoint
     *
     * This endpoint allows you to register client and generate token for authentication.
     * Along token client details will be displayed. To call authorized endpoints you need access_token generated by this endpoint.
     *
     * @bodyParam   name string required The name of the client. Example: John Panda
     * @bodyParam   email email required The valid email of the client. Example: john@example.com
     * @bodyParam   password string required The password of the client. Example: secret
     *
     * @response {
     *      "status": true,
     *      "data": {
     *          "name": "Panda",
     *          "email": "panda@gmail.coma",
     *          "updated_at": "2021-12-15T19:22:18.000000Z",
     *          "created_at": "2021-12-15T19:22:18.000000Z",
     *          "id": 2
     *      },
     *      "access_token": "14|wiazS1DtHNXIWDToygChQD84uqU9HwVaU10nWVia",
     *      "token_type": "Bearer"
     *  }
     *
     */
    function register(Request $request)
    {
        $messages = array(
            'name.required' => __('Name field is required.'),
            'name.string' => __('Name must be string.'),
            'email.required' => __('Email field is required.'),
            'email.string' => __('Email must be string.'),
            'email.email' => __('Email address must be valid.'),
            'email.unique' => __('Email address is already taken.'),
            'password.required' => __('Password field is required.'),
            'password.string' => __('Password must be string.'),
            'password.min' => __('Password must be at-least 8 characters.')
        );
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|unique:customers',
            'password' => 'required|string|min:8'
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()]);
        }

        $user = Customer::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password)
        ]);

        $token = $user->createToken('auth_token')->plainTextToken;

        return response()
            ->json(['status' => true, 'data' => $user, 'access_token' => $token, 'token_type' => 'Bearer'], 201);
    }

    /**
     * Login Endpoint
     *
     * This endpoint allows you to generate token of client after authentication.
     * Along token client details will be displayed. To call authorized endpoints you need access_token generated by this endpoint.
     *
     * @bodyParam   email email required The valid email of the client. Example: testuser@example.com
     * @bodyParam   password string required The password of the client. Example: secret
     *
     * @response {
     *      "status": true,
     *      "message": "You have successfully logged in!",
     *      "access_token": "13|JQHbQK8QuNHCzwztR30u2ogiBxuZNSBwJhZX8sop",
     *      "token_type": "Bearer",
     *      "data": {
     *          "id": 1,
     *          "name": "John Panda",
     *          "email": "panda@gmail.com",
     *          "status": 1
     *      }
     *  }
     *
     * @response 401 {
     *       "status": false,
     *       "message": "These credentials do not match our records!"
     *   }
     */

    function login(Request $request)
    {
        $messages = array(
            'email.required' => __('Email field is required.'),
            'email.email' => __('Email address must be valid.'),
            'password.required' => __('Password field is required.')
        );
        $validator = Validator::make($request->all(), [
            'email' => 'required|email',
            'password' => 'required'
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()]);
        }

        $user = Customer::select(['id', 'name', 'email', 'password', 'status'])
            ->where('email', $request->email)
            ->first();
        if (!$user || !Hash::check($request->password, $user->password)) {
            return response([
                'status' => false,
                'message' => 'These credentials do not match our records!'
            ], 401);
        }
        $token = $user->createToken('auth_token')->plainTextToken;

        return response()
            ->json(['status' => true, 'message' => 'You have successfully logged in!', 'access_token' => $token, 'token_type' => 'Bearer', 'data' => $user], 200);
    }


    /**
     * Logout Endpoint
     *
     * This endpoint allows you to remove client token generated for authentication to logout user.
     * To logout token must be required in header otherwise client will be Unauthenticated.
     *
     * @header Authorization Bearer $token
     *
     * @response {
     *      "status": true,
     *        "message": "You have successfully logged out!"
     *  }

     * @response 401 {
     *        "message": "Unauthenticated."
     *  }
     */

    function logout(Request $request)
    {
        $request->user()->tokens()->delete();

        return [
            'status' => true,
            'message' => 'You have successfully logged out!'
        ];
    }

    function profileUpdate(Request $request){


        $messages = array(
            'image.image' => __('Image field must be image file type.'),
            'image.mimes' => __('Supported extensions for image are jpeg,png,jpg only.'),
            'image.max' => __('Image size should be less than 2MB.')
        );
        $validator = Validator::make($request->all(), [
            'image' => 'nullable|image|mimes:jpeg,png,jpg|max:2048',
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()]);
        }

        //User from token
        $token = $request->user();

        $user = Customer::find($token->id);
        $user->name = $request->name;
        $user->phone = $request->phone;
        $user->address = $request->address;
        if($request->hasFile('image')){

            $imageName = time().'.'.$request->image->extension();
            $request->image->move(public_path('uploads/images/user/'), $imageName);
            $user->image = $imageName;
        }
        $user->save();

        return response()->json(['status' => true, 'message' => 'Your profile has been updated!', 'user'=>$user]);

    }

    function store_token(Request $request){

        $messages = array(
            'token.required' => __('Token field is required.')
        );
        $validator = Validator::make($request->all(), [
            'token' => 'required'
        ], $messages);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'errors' => $validator->errors()], 422);
        }

        $customer = $request->user();

        $token = array();
        $token['customer_id'] = $customer->id;
        $token['token'] = $request->token;
        CustomerToken::create($token);

        return response()->json(['status' => true, 'message' => "Device token has been stored!"]);

    }
}
